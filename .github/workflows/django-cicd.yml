# ===================================================
# DJANGO NOTES APP CI/CD PIPELINE
# ===================================================
# This workflow demonstrates a complete CI/CD pipeline for a Django application
# with Docker containerization and deployment to AWS EC2 instances.
# ===================================================

name: Django Notes App CI/CD

# ===================================================
# WORKFLOW TRIGGERS
# ===================================================
on:
  # Trigger on push to main and develop branches
  push:
    branches: [main, develop]
  
  # Trigger on pull requests to main and develop branches
  pull_request:
    branches: [main, develop]
  
  # Allow manual triggering with environment selection
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'staging'
        type: choice
        options:
          - staging
          - production

# ===================================================
# ENVIRONMENT VARIABLES
# ===================================================
# These variables are available to all jobs in the workflow
env:
  # Docker registry and image configuration
  DOCKER_REGISTRY: docker.io
  IMAGE_NAME: amitabhdevops/django-note-app-new

# ===================================================
# WORKFLOW JOBS
# ===================================================
jobs:
  # ===================================================
  # BUILD AND TEST JOB
  # ===================================================
  # This job builds the Docker image and runs tests inside the container
  build-and-test:
    name: Build and Test
    runs-on: ubuntu-latest
    
    steps:
      # LEARNING POINT: Checkout the repository code
      # This is typically the first step in any workflow
      - name: Checkout code
        uses: actions/checkout@v4
      
      # LEARNING POINT: Set up Docker Buildx
      # Buildx provides enhanced build capabilities for Docker
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      
      # LEARNING POINT: Build Docker image for testing
      # The 'load: true' option makes the image available locally
      # for subsequent steps to use
      - name: Build and export Docker image
        uses: docker/build-push-action@v4
        with:
          context: .
          load: true
          tags: ${{ env.IMAGE_NAME }}:test
          cache-from: type=gha
          cache-to: type=gha,mode=max
      
      # LEARNING POINT: Run Django tests inside the container
      # This ensures tests run in the same environment as production
      - name: Run tests
        run: |
          docker run --rm ${{ env.IMAGE_NAME }}:test python manage.py test

      # LEARNING POINT: Run security scanning tools
      # Bandit checks for common security issues in Python code
      # Safety checks for known vulnerabilities in dependencies
      # The '|| true' ensures the workflow continues even if issues are found
      - name: Run security scan
        run: |
          docker run --rm ${{ env.IMAGE_NAME }}:test sh -c "pip install bandit safety && bandit -r . -x tests/ || true && safety check || true"

  # ===================================================
  # BUILD AND PUSH JOB
  # ===================================================
  # This job builds the production Docker image and pushes it to Docker Hub
  build-and-push:
    name: Build and Push Production Image
    runs-on: ubuntu-latest
    needs: build-and-test  # Only run after tests pass
    
    steps:
      # LEARNING POINT: Checkout the repository code again
      # Each job runs on a fresh runner, so we need to checkout again
      - name: Checkout code
        uses: actions/checkout@v4
      
      # LEARNING POINT: Set up Docker Buildx for multi-platform builds
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      
      # LEARNING POINT: Authenticate with Docker Hub
      # This uses repository secrets for secure authentication
      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      
      # LEARNING POINT: Build and push the production image
      # The 'push: true' option uploads the image to Docker Hub
      - name: Build and push Docker image
        uses: docker/build-push-action@v4
        with:
          context: .
          push: true
          tags: ${{ env.IMAGE_NAME }}:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max
          
  # ===================================================
  # STAGING DEPLOYMENT JOB
  # ===================================================
  # This job deploys the application to the staging environment
  deploy-staging:
    name: Deploy to Staging EC2
    runs-on: ubuntu-latest
    needs: [build-and-test, build-and-push]  # Only deploy after build and test
    if: github.ref == 'refs/heads/main' || (github.event_name == 'workflow_dispatch' && github.event.inputs.environment == 'staging')
    environment:
      name: staging  # Uses the 'staging' environment in GitHub
    
    steps:
      # LEARNING POINT: Deploy using SSH
      # The appleboy/ssh-action allows executing commands on a remote server
      - name: Deploy to EC2
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ secrets.STAGING_EC2_IP }}
          username: ubuntu
          key: ${{ secrets.STAGING_SSH_PRIVATE_KEY }}
          script: |
            # LEARNING POINT: Update system packages
            # Keeping the system updated is a security best practice
            echo "Updating system..."
            sudo apt update -y

            # LEARNING POINT: Conditional installation of Docker
            # This checks if Docker is installed and installs it if needed
            # Makes the workflow more robust and self-healing
            if ! command -v docker &> /dev/null
            then
              echo "Installing Docker..."
              sudo apt install -y docker.io
              sudo systemctl enable docker
              sudo systemctl start docker
              sudo usermod -aG docker ubuntu
            fi
            
            # LEARNING POINT: Container management
            # Stop and remove any existing container to avoid conflicts
            echo "Stopping and removing existing containers..."
            docker stop django-notes-app || true
            docker rm django-notes-app || true
            
            # LEARNING POINT: Pull the latest image
            # Using the 'latest' tag which was pushed in the previous job
            echo "Pulling image ${{ env.IMAGE_NAME }}:latest"
            docker pull ${{ env.IMAGE_NAME }}:latest
            
            # LEARNING POINT: Run the container with proper configuration
            # -d: Run in detached mode (background)
            # --name: Assign a name for easier management
            # -p: Port mapping (host:container)
            echo "Starting container..."
            docker run -d --name django-notes-app -p 8000:8000 ${{ env.IMAGE_NAME }}:latest
            
            # LEARNING POINT: Clean up unused Docker resources
            # This prevents disk space issues over time
            echo "Cleaning up unused Docker resources..."
            docker system prune -af

  # ===================================================
  # PRODUCTION DEPLOYMENT JOB
  # ===================================================
  # This job deploys the application to the production environment
  deploy-production:
    name: Deploy to Production EC2
    runs-on: ubuntu-latest
    needs: [build-and-test, build-and-push]  # Only deploy after build and test
    if: github.ref == 'refs/heads/main' || (github.event_name == 'workflow_dispatch' && github.event.inputs.environment == 'production')
    environment:
      name: production  # Uses the 'production' environment in GitHub
    
    steps:
      # LEARNING POINT: Deploy using SSH
      # Same approach as staging but with production credentials
      - name: Deploy to EC2
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ secrets.PRODUCTION_EC2_IP }}
          username: ubuntu
          key: ${{ secrets.PRODUCTION_SSH_PRIVATE_KEY }}
          script: |
            # Update system
            echo "Updating system..."
            sudo apt update -y

            # Conditional installation of Docker
            if ! command -v docker &> /dev/null
            then
              echo "Installing Docker..."
              sudo apt install -y docker.io
              sudo systemctl enable docker
              sudo systemctl start docker
              sudo usermod -aG docker ubuntu
            fi
            
            # Stop any running container
            echo "Stopping and removing existing containers..."
            docker stop django-notes-app || true
            docker rm django-notes-app || true
            
            # Pull the latest image
            echo "Pulling image ${{ env.IMAGE_NAME }}:latest"
            docker pull ${{ env.IMAGE_NAME }}:latest
            
            # Run the container
            echo "Starting container..."
            docker run -d --name django-notes-app -p 8000:8000 ${{ env.IMAGE_NAME }}:latest
            
            # Clean up unused images
            echo "Cleaning up unused Docker resources..."
            docker system prune -af
      
      # LEARNING POINT: Create a GitHub release
      # This creates a permanent record of the deployment in GitHub
      - name: Create release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: release-${{ github.run_number }}
          release_name: Release ${{ github.run_number }}
          body: |
            Release ${{ github.run_number }} deployed to production.
            
            Changes in this release:
            ${{ github.event.head_commit.message }}
          draft: false
          prerelease: false

# ===================================================
# WORKFLOW SUMMARY
# ===================================================
# This workflow demonstrates:
# 1. Building and testing a Docker image
# 2. Security scanning with Bandit and Safety
# 3. Pushing the image to Docker Hub
# 4. Deploying to staging and production environments
# 5. Automatic system updates and Docker installation
# 6. Container management and cleanup
# 7. Creating GitHub releases for production deployments
# ===================================================
